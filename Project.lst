Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/06/20 16:42:52
:Counting and Sorting Random Integers     (randomArray.asm   Page 1 - 1


				TITLE Counting and Sorting Random Integers     (randomArray.asm)

				; Author: Daniel Dubisz
				; Last Modified: 3/1/2020
				; OSU email address: dubiszd@oregonstate.edu
				; Course number/section: 271
				; Project Number: 5                Due Date: 3/2/2020
				; Description: Program that creates an array of random integers,
				; displays them, then displays median, then sorts and displays,
				; then displays an array of how many times each value is in the array.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			LO = 10
 = 0000001D			HI = 29
 = 000000C8			ARRAYSIZE = 200




 00000000			.data

 00000000  000000C8 [		list	DWORD	ARRAYSIZE DUP (?)
	    00000000
	   ]
 00000320 000000C8		count	DWORD	ARRAYSIZE
 00000324 00002020		blank	DWORD	'  ', 0 ; spaces between numbers
	   00000000
 0000032C  00000014 [		counts	DWORD	20 DUP (0) ; array of times each int is in list
	    00000000
	   ]
 0000037C 50 72 6F 67 72	author	BYTE	"Programmed by Daniel", 0
	   61 6D 6D 65 64
	   20 62 79 20 44
	   61 6E 69 65 6C
	   00
 00000391 43 6F 75 6E 74	pTitle	BYTE	"Counting and Sorting Random Integers				", 0
	   69 6E 67 20 61
	   6E 64 20 53 6F
	   72 74 69 6E 67
	   20 52 61 6E 64
	   6F 6D 20 49 6E
	   74 65 67 65 72
	   73 09 09 09 09
	   00
 000003BA 54 68 69 73 20	note	BYTE	"This program generates 200 random numbers in the range [10 ... 29], displays the original list, sorts the list, displays the median value, displays the list sorted in ascending order, then displays the number of instances of each generated value.", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 20 69 6E 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   5B 31 30 20 2E
	   2E 2E 20 32 39
	   5D 2C 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6F 72 69 67
	   69 6E 61 6C 20
	   6C 69 73 74 2C
	   20 73 6F 72 74
	   73 20 74 68 65
	   20 6C 69 73 74
	   2C 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 2C 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6C 69 73
	   74 20 73 6F 72
	   74 65 64 20 69
	   6E 20 61 73 63
	   65 6E 64 69 6E
	   67 20 6F 72 64
	   65 72 2C 20 74
	   68 65 6E 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 20 6F 66 20
	   65 61 63 68 20
	   67 65 6E 65 72
	   61 74 65 64 20
	   76 61 6C 75 65
	   2E 00
 000004B1 59 6F 75 72 20	sorted	BYTE	"Your sorted random numbers: ", 0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 20 00
 000004CE 59 6F 75 72 20	unsort	BYTE	"Your unsorted random numbers: ", 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000004ED 4C 69 73 74 20	med		BYTE	"List Median: ", 0
	   4D 65 64 69 61
	   6E 3A 20 00
 000004FB 59 6F 75 72 20	inst	BYTE	"Your list of isntances of each generated number, starting with the number of 10's: ", 0
	   6C 69 73 74 20
	   6F 66 20 69 73
	   6E 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 31 30 27
	   73 3A 20 00
 0000054F 47 6F 6F 64 62	bye		BYTE	"Goodbye, thanks for utilizing this! ", 0
	   79 65 2C 20 74
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   75 74 69 6C 69
	   7A 69 6E 67 20
	   74 68 69 73 21
	   20 00





 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E	call	Randomize ; seeds random generator
 00000005  E8 00000088		call	greeting
 0000000A  68 00000000 R	push	OFFSET list		
 0000000F  FF 35 00000320 R	push	count
 00000015  E8 000000A9		call	random
 0000001A  68 00000000 R	push	OFFSET list
 0000001F  FF 35 00000320 R	push	count
 00000025  6A 14		push	20	; uses to keep track of when to put new line
 00000027  E8 000000CB		call	write
 0000002C  68 00000000 R	push	OFFSET list		
 00000031  FF 35 00000320 R	push	count
 00000037  E8 0000014F		call	displayMedian
 0000003C  68 00000000 R	push	OFFSET list		
 00000041  FF 35 00000320 R	push	count
 00000047  E8 000000EB		call	sortList
 0000004C  68 00000324 R	push	OFFSET blank
 00000051  68 00000000 R	push	OFFSET list
 00000056  FF 35 00000320 R	push	count
 0000005C  6A 14		push	20
 0000005E  E8 00000094		call	write
 00000063  68 00000000 R	push	OFFSET list
 00000068  FF 35 00000320 R	push	count
 0000006E  68 0000032C R	push	OFFSET counts
 00000073  E8 00000152		call	countList
 00000078  68 0000032C R	push	OFFSET counts
 0000007D  6A 14		push	20	
 0000007F  6A 14		push	20
 00000081  E8 00000071		call	write
 00000086  E8 0000017A		call	goodBye

				; call	sortList



				exit	; exit to operating system
 0000008B  6A 00	   *	    push   +000000000h
 0000008D  E8 00000000 E   *	    call   ExitProcess
 00000092			main ENDP

				;Procedure to introduce the program.
				;receives: none
				;returns: none
				;preconditions:  none
				;registers changed: edx
 00000092			greeting PROC

 00000092  68 000003BA R	push	OFFSET note
 00000097  68 0000037C R	push	OFFSET author
 0000009C  68 00000391 R	push	OFFSET pTitle
 000000A1  5A			pop		edx
 000000A2  E8 00000000 E	call	WriteString
 000000A7  5A			pop		edx
 000000A8  E8 00000000 E	call	WriteString
 000000AD  E8 00000000 E	call	CrLf
 000000B2  5A			pop		edx
 000000B3  E8 00000000 E	call	WriteString
 000000B8  E8 00000000 E	call	CrLf
 000000BD  E8 00000000 E	call	CrLf


 000000C2  C3			ret 

 000000C3			greeting ENDP
				;Procedure to fill list with random ints, creates stack to do so
				;receives: list, count passed onto stack
				;returns: list filled with random ints
				;preconditions:  HI and LO must have ints of the range you want you array to be filled with
				; count must have the size of the array. 
				;registers changed: edx, esp, esi holds list, ecx holds count, eax holds various ints, ebx holds hi, 

 000000C3			random PROC
 000000C3  68 000004CE R	push OFFSET unsort
 000000C8  5A			pop	 edx 
 000000C9  E8 00000000 E	call WriteString
 000000CE  E8 00000000 E	call CrLf
 000000D3  55			push ebp
 000000D4  8B EC		mov ebp,esp
 000000D6  8B 75 0C		mov esi,[ebp+12] ;@list
 000000D9  8B 4D 08		mov ecx,[ebp+8] ;ecx is loop control
				; works cited: 
				; powerpoint slide on randomRange from lectures

 000000DC			randomLoop:
 000000DC  6A 0A		push LO
 000000DE  6A 1D		push HI
 000000E0  58			pop eax ; HI
 000000E1  5B			pop ebx ; LO
 000000E2  2B C3		sub eax, ebx ;31-18 = 13
 000000E4  40			inc eax ;14
 000000E5  E8 00000000 E	call RandomRange ;eax in [0..13]
 000000EA  03 C3		add eax,ebx ;eax in [18..31]
 000000EC  89 06		mov	[esi], eax
 000000EE  83 C6 04		add esi,4 ;next element
 000000F1  E2 E9		loop randomLoop
 000000F3			RandomEnd:
 000000F3  5D			pop ebp
 000000F4  C2 0018		ret 24

 000000F7			random	ENDP

				;Procedure to print out values in an array, creates stack to do so
				;receives: array(what we iterate through), count (how large the array is), and 20, to see when we need a new line
				;returns: none, prints out each item in array pushed on and returns stack
				;preconditions:  all things recieved must be pushed on before hand. 
				;registers changed: edx, esi, ecx

 000000F7			write	PROC

 000000F7  55			push ebp
 000000F8  8B EC		mov ebp,esp
 000000FA  8B 75 10		mov esi,[ebp+16] ;@list
 000000FD  8B 4D 0C		mov ecx,[ebp+12] ;ecx is loop control
 00000100  8B 55 08		mov	edx,[ebp+8]	 ; edx counts how many spaces

 00000103			writeLoop:
 00000103  83 FA 14		cmp		edx, 20 ; if first number, no space
 00000106  74 0D		je		noSpace
 00000108  52			push	edx ; so we can use it for write
 00000109  68 00000324 R	push	OFFSET blank
 0000010E  5A			pop		edx ; space
 0000010F  E8 00000000 E	call	WriteString
 00000114  5A			pop		edx	; so we use it for main function, iteration
 00000115			noSpace:
 00000115  8B 06		mov eax,[esi] ;get current element
 00000117  E8 00000000 E	call	WriteDec
 0000011C  4A			dec		edx
 0000011D  83 FA 00		cmp		edx, 0
 00000120  74 02		je		space
 00000122  EB 0A		jmp		ending

 00000124			space:
 00000124  BA 00000014		mov		edx, 20
 00000129  E8 00000000 E	call	CrLf

 0000012E			ending:
 0000012E  83 C6 04		add esi,4 ;next element
 00000131  E2 D0		loop writeLoop
 00000133			writeEnd:
				; at the end of the loop
 00000133  5D			pop ebp
 00000134  C2 000C		ret 12
 00000137			write	ENDP

				;Procedure to sort the array given, creates stack to do so
				;receives: list, count
				;returns: sorted array that it was given.
				;preconditions: random PROC must have been called, or it will be an empty array.
				;registers changed: edx, eax, esi, ecx

 00000137			sortList	PROC
 00000137  68 000004B1 R	push	OFFSET sorted
 0000013C  5A			pop		edx
 0000013D  E8 00000000 E	call	WriteString
 00000142  E8 00000000 E	call	CrLf
 00000147  55			push ebp
 00000148  8B EC		mov ebp,esp
 0000014A  8B 75 0C		mov esi,[ebp+12] ;@list
 0000014D  8B 4D 08		mov ecx,[ebp+8] ;ecx is how far up to go
 00000150  83 C6 04		add	esi, 4		; starts on the second element
 00000153  B8 00000001		mov	eax, 1 ; eax will be counter
 00000158			sortLoop:
 00000158  3B C1		cmp		eax, ecx	; if we've gone through, it's done sorting
 0000015A  7D 0B		jge		endSort
 0000015C  E8 0000000A		call	exchangeElements
 00000161  40			inc		eax
 00000162  83 C6 04		add		esi,4 ;next element
 00000165  EB F1		jmp	sortLoop
 00000167			endSort:


 00000167  5D			pop ebp
 00000168  C2 0008		ret 8


 0000016B			sortList	ENDP

				;Procedure to take the number given from sortList and put it in the correct spot in list
				;receives: esi from calling procedure sortList
				;returns: pops eax and esi back before returing, to be used by sortList more
				;preconditions:  sortList must have been called
				;registers changed: edx, ebx, eax, esi

 0000016B			exchangeElements	PROC
 0000016B  50			push	eax ; save eax, esi to be used by calling proc later
 0000016C  56			push	esi


				; works cited: 
				; gnome sort from http://www.miguelcasillas.com/?mcportfolio=sorting-algorithms-asm-x86
 0000016D			exchangeLoop:
 0000016D  8B 1E		mov		ebx, [esi] ; put current value in ebx
 0000016F  8B 56 FC		mov		edx, [esi-4] ; put value before in edx
 00000172  83 F8 00		cmp		eax, 0
 00000175  74 11		je		endExchange

 00000177  3B D3		cmp	edx, ebx
 00000179  7D 02		jge	switch
 0000017B  EB 0B		jmp	endExchange

 0000017D			switch:
 0000017D  89 16		mov		[esi], edx
 0000017F  89 5E FC		mov		[esi-4], ebx
 00000182  48			dec		eax
 00000183  83 EE 04		sub		esi, 4
 00000186  EB E5		jmp		exchangeLoop

 00000188			endExchange:
 00000188  5E			pop		esi
 00000189  58			pop		eax
 0000018A  C3			ret 

 0000018B			exchangeElements	ENDP

				;Procedure to create a stack, loop through list and find the median of the values in that array
				;receives: list, count
				;returns: prints out median and then returns
				;preconditions:  list and count must be set
				;registers changed: edx, esi, eax, ebx

 0000018B			displayMedian		PROC
 0000018B  55			push ebp
 0000018C  8B EC		mov ebp,esp
 0000018E  8B 75 0C		mov esi,[ebp+12] ;@list
 00000191  8B 4D 08		mov ecx,[ebp+8] ;ecx is loop control
 00000194  B8 00000000		mov	eax, 0	; getting the median

 00000199			more:
 00000199  8B 16		mov edx,[esi] ;get current element
 0000019B  03 C2		add	eax, edx ; add number and divide by 200 later
 0000019D  83 C6 04		add esi,4 ;next element
 000001A0  E2 F7		loop more
 000001A2			endMore:
 000001A2  68 000004ED R	push	OFFSET med
 000001A7  68 000000C8		push	ARRAYSIZE
 000001AC  5B			pop		ebx
 000001AD  33 D2		xor		edx, edx
 000001AF  F7 F3		div		ebx
 000001B1  E8 00000000 E	call	CrLf
 000001B6  5A			pop		edx
 000001B7  E8 00000000 E	call	WriteString
 000001BC  E8 00000000 E	call	WriteDec	; shows median
 000001C1  E8 00000000 E	call	CrLf

 000001C6  5D			pop ebp
 000001C7  C2 0008		ret 8

 000001CA			displayMedian		ENDP

				;Procedure to create stack, go through list, see how many times each int shows up,
				; and then increments that point in counts. i.e, if there is a 10 in list, then counts[0] would increase by 1, and so on...
				;receives: list, count, counts
				;returns: counts array is now holding how many times each value appears in list
				;preconditions:  random proc must have already been run
				;registers changed: edx, eax, esi, ecx, 
 000001CA			countList			PROC
 000001CA  E8 00000000 E	call CrLf
 000001CF  68 000004FB R	push OFFSET inst
 000001D4  5A			pop	 edx
 000001D5  E8 00000000 E	call WriteString
 000001DA  E8 00000000 E	call CrLf
 000001DF  55			push ebp
 000001E0  8B EC		mov ebp,esp
 000001E2  8B 75 10		mov esi,[ebp+16] ;@list
 000001E5  8B 4D 0C		mov ecx,[ebp+12] ;ecx is loop control

 000001E8			more:
 000001E8  8B 16		mov edx,[esi] ;get current element
 000001EA  56			push esi ; saves esi
 000001EB  8B 75 08		mov  esi, [ebp+8] ; move esi to counts
 000001EE  83 EA 0A		sub	edx, 10	; grabs number between 0 and 18
 000001F1  6B D2 04		imul edx, 4 ; multiplies it by 4
 000001F4  8B 04 16		mov	eax, [esi + edx] ; that is the spot on the array we increment
 000001F7  40			inc	eax
 000001F8  89 04 16		mov [esi + edx], eax
 000001FB  5E			pop	esi ; gives back esi to keep looping through array
 000001FC  83 C6 04		add esi,4 ;next element
 000001FF  E2 E7		loop more

 00000201			endMore:
 00000201  5D			pop ebp
 00000202  C2 000C		ret 12

 00000205			CountList			ENDP

				;Procedure to say goodbye to user
				;receives: none
				;returns: none
				;preconditions:  none
				;registers changed: edx
 00000205			goodBye		PROC
 00000205  E8 00000000 E	call	CrLf
 0000020A  E8 00000000 E	call	CrLf
 0000020F  68 0000054F R	push	OFFSET bye
 00000214  5A			pop		edx
 00000215  E8 00000000 E	call	WriteString

 0000021A  C3			ret
 0000021B			goodBye		ENDP





				END main
Microsoft (R) Macro Assembler Version 14.24.28314.0	    03/06/20 16:42:52
:Counting and Sorting Random Integers     (randomArray.asm   Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000574 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000021B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 000001CA _TEXT	Length= 0000003B Public STDCALL
  more . . . . . . . . . . . . .	L Near	 000001E8 _TEXT	
  endMore  . . . . . . . . . . .	L Near	 00000201 _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000018B _TEXT	Length= 0000003F Public STDCALL
  more . . . . . . . . . . . . .	L Near	 00000199 _TEXT	
  endMore  . . . . . . . . . . .	L Near	 000001A2 _TEXT	
exchangeElements . . . . . . . .	P Near	 0000016B _TEXT	Length= 00000020 Public STDCALL
  exchangeLoop . . . . . . . . .	L Near	 0000016D _TEXT	
  switch . . . . . . . . . . . .	L Near	 0000017D _TEXT	
  endExchange  . . . . . . . . .	L Near	 00000188 _TEXT	
goodBye  . . . . . . . . . . . .	P Near	 00000205 _TEXT	Length= 00000016 Public STDCALL
greeting . . . . . . . . . . . .	P Near	 00000092 _TEXT	Length= 00000031 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000092 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
random . . . . . . . . . . . . .	P Near	 000000C3 _TEXT	Length= 00000034 Public STDCALL
  randomLoop . . . . . . . . . .	L Near	 000000DC _TEXT	
  RandomEnd  . . . . . . . . . .	L Near	 000000F3 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000137 _TEXT	Length= 00000034 Public STDCALL
  sortLoop . . . . . . . . . . .	L Near	 00000158 _TEXT	
  endSort  . . . . . . . . . . .	L Near	 00000167 _TEXT	
write  . . . . . . . . . . . . .	P Near	 000000F7 _TEXT	Length= 00000040 Public STDCALL
  writeLoop  . . . . . . . . . .	L Near	 00000103 _TEXT	
  noSpace  . . . . . . . . . . .	L Near	 00000115 _TEXT	
  space  . . . . . . . . . . . .	L Near	 00000124 _TEXT	
  ending . . . . . . . . . . . .	L Near	 0000012E _TEXT	
  writeEnd . . . . . . . . . . .	L Near	 00000133 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Dh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
author . . . . . . . . . . . . .	Byte	 0000037C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	DWord	 00000324 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye  . . . . . . . . . . . . . .	Byte	 0000054F _DATA	
counts . . . . . . . . . . . . .	DWord	 0000032C _DATA	
count  . . . . . . . . . . . . .	DWord	 00000320 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inst . . . . . . . . . . . . . .	Byte	 000004FB _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
med  . . . . . . . . . . . . . .	Byte	 000004ED _DATA	
note . . . . . . . . . . . . . .	Byte	 000003BA _DATA	
pTitle . . . . . . . . . . . . .	Byte	 00000391 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted . . . . . . . . . . . . .	Byte	 000004B1 _DATA	
unsort . . . . . . . . . . . . .	Byte	 000004CE _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
